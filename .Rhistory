raw_data$mentions[lengths(raw_data$mentions) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"@\\S+\\s*\\b","")
mb_words <- raw_data %>%
filter(type == "mbdata") %>%
unnest_tokens(word, cleaned_message, drop = FALSE) %>%
filter(str_detect(word, "[a-z']$"),
!word %in% stop_words$word)
mb_words <- select(mb_words, -c(source, type, `date(yyyyMMddHHmmss)`, date, timestamp, message))
mb_messages_by_author <- raw_data %>%
filter(type == "mbdata") %>%
count(author, cleaned_message)
mb_messages_by_author_aggregated <- mb_messages_by_author %>%
group_by(author) %>%
summarize(unique_count = n(), total_count = sum(n), junk_check = total_count/unique_count)
mb_words_by_timeblock <- mb_words %>%
count(time_block, word, sort=TRUE)
mb_words_by_timeblock_tfidf <- mb_words_by_timeblock %>%
bind_tf_idf(word, time_block, n) %>%
arrange(desc(tf_idf))
mb_words_by_author <- mb_words %>%
count(author, word, sort = TRUE) %>%
ungroup()
mb_words_by_author$in_dictionary <- if_else (mb_words_by_author$word %in% GradyAugmented,0,1)
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "syuzhet")
mb_words_by_author$total_in_dictionary <- mb_words_by_author$in_dictionary*mb_words_by_author$n
mb_words_by_author$total_sentiment <- mb_words_by_author$sentiment*mb_words_by_author$n
mb_words_by_author_tfidf <- mb_words_by_author %>%
bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf))
mb_words_by_author_nested <- mb_words_by_author %>%
group_by(author) %>%
group_nest()
set.seed(1234)
wordcloud(mb_words_by_author$word, mb_words_by_author$n, max.words = 300)
mb_words_by_author_agg_sentiment <- mb_words_by_author %>%
group_by(author) %>%
summarise(grandtotal_sentiment = sum(total_sentiment)) %>%
arrange(desc(grandtotal_sentiment))
mb_words_by_author_NotInDict <- mb_words_by_author %>%
filter(total_in_dictionary > 0) %>%
group_by(author) %>%
summarise(sum(total_in_dictionary), data = list(word))
raw_data$hashtags <- str_extract_all(raw_data$message,"(?<=#)\\w+\\b")
raw_data$hashtags[lengths(raw_data$hashtags) == 0] <- NA_character_
raw_data$retweet_source <- str_extract_all(raw_data$message,"(?<=RT @)\\S+\\b")
raw_data$retweet_source[lengths(raw_data$retweet_source) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$message,"RT @\\S+\\s*\\b","")
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"#\\w+\\s*\\b","")
raw_data$mentions <- if (str_extract_all(raw_data$cleaned_message,"(?<=@)\\S+\\b") %in% raw_data$author) {str_extract_all(raw_data$cleaned_message,"(?<=@)\\S+\\b")} else if (str_extract_all(raw_data$cleaned_message,"(?<=@)\\w+\\b") %in% raw_data$author) {str_extract_all(raw_data$cleaned_message,"(?<=@)\\w+\\b")}
raw_data$mentions[lengths(raw_data$mentions) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"@\\S+\\s*\\b","")
View(raw_data)
View(mb_words_by_author_NotInDict)
datatable(mb_words_by_author_NotInDict)
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
raw_data$message <- greeks(raw_data$message)
View(raw_data)
mctext_files <- list.files(path = "data", pattern = '.csv$', full.names = TRUE) %>%
map(read_csv)
raw_data <- data.table::rbindlist(mctext_files, use.names = TRUE, idcol = "source")
write_rds(raw_data, "data/rds/raw_data.rds")
glimpse(raw_data)
raw_data$timestamp <- paste(substring(raw_data$`date(yyyyMMddHHmmss)`,first = 9, last = 10),
substring(raw_data$`date(yyyyMMddHHmmss)`,first = 11, last = 12),sep=":")
raw_data$date <- paste(substring(raw_data$`date(yyyyMMddHHmmss)`, first = 1, last = 4),
substring(raw_data$`date(yyyyMMddHHmmss)`, first = 5, last = 6),
substring(raw_data$`date(yyyyMMddHHmmss)`, first = 7, last = 8),sep = "-")
raw_data$date <- parse_date(raw_data$date, format = "%Y-%m-%d")
raw_data$timestamp <- parse_time(raw_data$timestamp, format = "%AT")
raw_data$datetime <- paste(raw_data$date, raw_data$timestamp, sep = " ")
raw_data$datetime <- parse_date_time(raw_data$datetime, "%Y-%m-%d %H:%M:%S")
raw_data$time_block = cut(raw_data$datetime, breaks = "15 min")
glimpse(raw_data)
raw_data$hashtags <- str_extract_all(raw_data$message,"(?<=#)\\w+\\b")
raw_data$hashtags[lengths(raw_data$hashtags) == 0] <- NA_character_
raw_data$retweet_source <- str_extract_all(raw_data$message,"(?<=RT @)\\S+\\b")
raw_data$retweet_source[lengths(raw_data$retweet_source) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$message,"RT @\\S+\\s*\\b","")
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"#\\w+\\s*\\b","")
raw_data$mentions <- if (str_extract_all(raw_data$cleaned_message,"(?<=@)\\S+\\b") %in% raw_data$author) {str_extract_all(raw_data$cleaned_message,"(?<=@)\\S+\\b")} else if (str_extract_all(raw_data$cleaned_message,"(?<=@)\\w+\\b") %in% raw_data$author) {str_extract_all(raw_data$cleaned_message,"(?<=@)\\w+\\b")}
raw_data$mentions[lengths(raw_data$mentions) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"@\\S+\\s*\\b","")
View(raw_data)
View(raw_data)
View(raw_text)
retweet_data <- raw_data %>%
filter(type == 'mbdata') %>%
filter(retweet_source != NA)
View(retweet_data)
retweet_data <- raw_data %>%
filter(type == 'mbdata') %>%
filter(retweet_source %isnot% NA)
retweet_data <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source))
View(retweet_data)
retweet_data <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source)) %>%
transmute(source_label = author, target_label = retweet_source)
retweet_data_edges <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source)) %>%
transmute(source_label = author, target_label = retweet_source)
remove(retweet_data)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(author, retweet_source, n)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label, target_label, n)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label, target_label, count()=n)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label, target_label, count(n))
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label, target_label)
View(retweet_data_edges_agg)
retweet_data_edges <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source))
View(retweet_data_edges)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(author)
View(retweet_data_edges_agg)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label, target_label)
retweet_data_edges <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source)) %>%
transmute(source_label = author, target_label = retweet_source)
retweet_data_edges_agg <- retweet_data_edges %>%
group_by(source_label, target_label)
View(retweet_data_edges)
View(retweet_data_edges)
retweet_data_edges_agg <- retweet_data_edges %>%
count(source_label, target_label) %>%
ungroup
View(retweet_data_edges_agg)
select(distinct(retweet_data_edges$source_label))
distinct(retweet_data_edges$source_label)
distinct(retweet_data_edges, retweet_data_edges$source_label)
RT_target <- distinct(retweet_data_edges, retweet_data_edges$target_label)
RT_source <- distinct(retweet_data_edges, retweet_data_edges$source_label)
View(RT_target)
RT_edges <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source)) %>%
transmute(source_label = author, target_label = retweet_source)
RT_edges_agg <- retweet_data_edges %>%
count(source_label, target_label) %>%
ungroup
remove(retweet_data_edges, retweet_data_edges_agg)
RT_node <- c(RT_source, RT_target)
View(RT_node)
RT_node <- bind_rows(RT_source, RT_target)
RT_node <- RT_node %>%
distinct()
View(RT_node)
View(RT_node)
View(RT_source)
RT_source <- distinct(retweet_data_edges, node = retweet_data_edges$source_label)
RT_source <- RT_source$node = distinct(retweet_data_edges, retweet_data_edges$source_label)
RT_source <- distinct(RT_edges, node = RT_edges$source_label)
View(RT_source)
RT_target <- distinct(RT_edges, node = RT_edges$target_label)
RT_node <- bind_rows(RT_source, RT_target)
View(RT_source)
RT_target <- distinct(RT_edges, node = as.character(RT_edges$target_label))
RT_node <- bind_rows(RT_source, RT_target)
View(RT_node)
RT_node <- RT_node %>%
distinct()
RT_node <- RT_node %>%
distinct(node)
View(RT_node)
RT_node <- RT_node %>%
distinct(node)
View(RT_edges_agg)
RT_graph <- tbl_graph(nodes = RT_node, edges = RT_edges_agg, directed = TRUE)
View(RT_edges_agg)
RT_edges <- raw_data %>%
filter(type == 'mbdata') %>%
filter(!is.na(retweet_source)) %>%
transmute(source_label = author, target_label = as.character(retweet_source))
RT_edges_agg <- RT_edges %>%
count(source_label, target_label) %>%
ungroup
RT_graph <- tbl_graph(nodes = RT_node, edges = RT_edges_agg, directed = TRUE)
RT_graph
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(size = 3))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(size = 3)) +
scale_edge_width(range = c(0.1,5))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(size = n)) +
scale_edge_width(range = c(0.1,5))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(size = n)) +
scale_edge_width(range = c(0.1,3))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(size = n)) +
scale_edge_width(range = c(0.1,0.3))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = n)) +
scale_edge_width(range = c(0.1,0.3))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = n)) +
scale_edge_width(range = c(1,1))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = n)) +
scale_edge_width(range = c(1,1)) +
scale_edge_length(range = c(1,1))
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(label = node, colour = node, size = n)) +
scale_edge_width(range = c(1,1))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(label = node, colour = node, size = centrality_betweenness())) +
scale_edge_width(range = c(1,1))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = centrality_betweenness())) +
scale_edge_width(range = c(1,1))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = centrality_betweenness()))
g + theme_graph()
source('~/.active-rstudio-document', echo=TRUE)
install.packages("rtweet")
install.packages("hrbrthemes")
source('~/.active-rstudio-document', echo=TRUE)
rstats <- search_tweets("#rstats", n=1500)
filter(rstats, retweet_count > 0) %>%
select(screen_name, mentions_screen_name) %>%
unnest(mentions_screen_name) %>%
filter(!is.na(mentions_screen_name)) %>%
graph_from_data_frame() -> rt_g
source('~/.active-rstudio-document', echo=TRUE)
rstats <- search_tweets("#rstats", n=1500)
filter(rstats, retweet_count > 0) %>%
select(screen_name, mentions_screen_name) %>%
unnest(mentions_screen_name) %>%
filter(!is.na(mentions_screen_name)) %>%
graph_from_data_frame() -> rt_g
ch_tweets("#rstats", n=1500)
filter(rstats, retweet_count > 0) %>%
select(screen_name, mentions_screen_name) %>%
unnest(mentions_screen_name) %>%
filter(!is.na(mentions_screen_name)) %>%
graph_from_data_frame() -> rt
View(rt_g)
View(rt)
V(rt_g)$node_label <- unname(ifelse(degree(rt_g)[V(rt_g)] > 20, names(V(rt_g)), ""))
V(rt_g)$node_size <- unname(ifelse(degree(rt_g)[V(rt_g)] > 20, degree(rt_g), 0))
View(rt)
ggraph(rt_g, layout = 'linear', circular = TRUE) +
geom_edge_arc(edge_width=0.125, aes(alpha=..index..)) +
geom_node_label(aes(label=node_label, size=node_size),
label.size=0, fill="#ffffff66", segment.colour="springgreen",
color="slateblue", repel=TRUE, family=font_rc, fontface="bold") +
coord_fixed() +
scale_size_area(trans="sqrt") +
labs(title="Retweet Relationships", subtitle="Most retweeted screen names labeled. Darkers edges == more retweets. Node size == larger degree") +
theme_graph(base_family=font_rc) +
theme(legend.position="none")
View(rt_g)
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = centrality_betweenness()))
scale_size_area()
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = centrality_betweenness()))
g + theme_graph()
RT_network <- ggraph(RT_graph, layout = 'nicely') +
geom_edge_link(aes()) +
geom_node_point(aes(colour = node, size = centrality_degree()))
g + theme_graph()
remove(rstats,rt,rt_g)
View(a)
View(g)
remove(a,g)
remove(greek)
RT_network <- RT_graph %>%
mutate(degree_centrality = centrality_degree()) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width=Weight),
alpha=0.2) +
scale_edge_width(range = c(0.1, 5)) +
geom_node_point(aes(colour = node,
size=degree_centrality))
g + theme_graph()
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
RT_network + theme_graph()
RT_network <- RT_graph %>%
mutate(degree_centrality = centrality_degree()) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width=n),
alpha=0.2) +
scale_edge_width(range = c(0.1, 5)) +
geom_node_point(aes(colour = node,
size=degree_centrality))
RT_network + theme_graph()
RT_network <- RT_graph %>%
mutate(degree_centrality = centrality_degree()) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width=n),
alpha=0.2) +
scale_edge_width(range = c(0.1, 0.5)) +
geom_node_point(aes(colour = node,
size=degree_centrality))
RT_network + theme_graph()
RT_network <- RT_graph %>%
mutate(degree_centrality = centrality_degree()) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width=n),
alpha=0.2) +
scale_edge_width(range = c(0.01, 0.5)) +
geom_node_point(aes(colour = node,
size=degree_centrality))
RT_network + theme_graph()
RT_network <- RT_graph %>%
mutate(degree_centrality = centrality_degree()) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width=n),
alpha=0.2) +
scale_edge_width(range = c(0.1, 5)) +
geom_node_point(aes(colour = node,
size=degree_centrality))
RT_network + theme_graph()
View(mb_messages_by_author)
View(mb_words_by_author)
mb_words_by_author_NotInDict <- mb_words_by_author %>%
filter(in_dictionary > 0) %>%
group_by(author) %>%
summarise(sum(in_dictionary), data = list(word))
View(mb_words_by_author_NotInDict)
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "nrc")
View(mb_words_by_author)
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "syuzhet")
View(mb_words_by_author)
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "nrc")
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "syuzhet")
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "nrc")
mb_words_by_author$sentiment <- get_sentiment(mb_words_by_author$word, method = "syuzhet")
mb_words_by_author$sentiment_nrc <- get_sentiments("nrc")
install.packages("textdata")
library(textdata)
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters','textdata')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
mb_words_by_author$sentiment_nrc <- get_sentiments("nrc")
mb_words_by_author$sentiment_nrc <- mb_words_by_author$word %>% get_sentiments("nrc")
mb_words_by_author$sentiment_nrc <- mb_words_by_author$word %>% get_sentiments()
mb_words_by_author$sentiment_nrc <- mb_words_by_author$word %>% get_sentiments(nrc)
nrc <- get_sentiments("nrc")
View(nrc)
View(mb_messages_by_author_aggregated)
mb_messages_by_author_aggregated <- mb_messages_by_author %>%
group_by(author) %>%
summarize(unique_count = n(), total_count = sum(n), junk_check = total_count/unique_count) %>%
filter(junk_check > 1)
wordcloud(mb_words_by_author$word, mb_words_by_author$n, max.words = 300)
library(distill)
create_post("in-class-ex-11")
library(shiny)
library(shinydashboard)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE, fig.retina = 3)
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters','textdata')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
mctext_files <- list.files(path = "data", pattern = '.csv$', full.names = TRUE) %>%
map(read_csv)
raw_data <- data.table::rbindlist(mctext_files, use.names = TRUE, idcol = "source")
write_rds(raw_data, "data/rds/raw_data.rds")
glimpse(raw_data)
raw_data$timestamp <- paste(substring(raw_data$`date(yyyyMMddHHmmss)`,first = 9, last = 10),
substring(raw_data$`date(yyyyMMddHHmmss)`,first = 11, last = 12),sep=":")
raw_data$date <- paste(substring(raw_data$`date(yyyyMMddHHmmss)`, first = 1, last = 4),
substring(raw_data$`date(yyyyMMddHHmmss)`, first = 5, last = 6),
substring(raw_data$`date(yyyyMMddHHmmss)`, first = 7, last = 8),sep = "-")
raw_data$date <- parse_date(raw_data$date, format = "%Y-%m-%d")
raw_data$timestamp <- parse_time(raw_data$timestamp, format = "%AT")
raw_data$datetime <- paste(raw_data$date, raw_data$timestamp, sep = " ")
raw_data$datetime <- parse_date_time(raw_data$datetime, "%Y-%m-%d %H:%M:%S")
raw_data$time_block = cut(raw_data$datetime, breaks = "15 min")
glimpse(raw_data)
raw_data$hashtags <- str_extract_all(raw_data$message,"(?<=#)\\w+\\b")
raw_data$hashtags[lengths(raw_data$hashtags) == 0] <- NA_character_
raw_data$retweet_source <- str_extract_all(raw_data$message,"(?<=RT @)\\S+\\b")
raw_data$retweet_source[lengths(raw_data$retweet_source) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$message,"RT @\\S+\\s*\\b","")
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"#\\w+\\s*\\b","")
raw_data$mentions <- if (str_extract_all(raw_data$cleaned_message,"(?<=@)\\S+\\b") %in% raw_data$author) {str_extract_all(raw_data$cleaned_message,"(?<=@)\\S+\\b")} else if (str_extract_all(raw_data$cleaned_message,"(?<=@)\\w+\\b") %in% raw_data$author) {str_extract_all(raw_data$cleaned_message,"(?<=@)\\w+\\b")}
raw_data$mentions[lengths(raw_data$mentions) == 0] <- NA_character_
raw_data$cleaned_message <- str_replace_all(raw_data$cleaned_message,"@\\S+\\s*\\b","")
mb_words <- raw_data %>%
filter(type == "mbdata") %>%
unnest_tokens(word, cleaned_message, drop = FALSE) %>%
filter(str_detect(word, "[a-z']$"),
!word %in% stop_words$word)
mb_words <- select(mb_words, -c(source, type, `date(yyyyMMddHHmmss)`, date, timestamp, message))
View(mb_messages_by_author)
View(mb_messages_by_author_aggregated)
View(mb_messages_by_author)
View(mb_words_by_author_aggregated)
library(plotly)
library(googledrive)
detach("package:googledrive", unload = TRUE)
library(devtools)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE, fig.retina = 3)
# install.packages("devtools")
devtools::install_github("thomasp85/patchwork")
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters','textdata','plotly','patchwork')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
install.packages(p)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE, fig.retina = 3)
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
install.packages("ellipsis")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE, fig.retina = 3)
library(p, character.only = T)
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters','textdata','plotly','patchwork')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters','textdata','plotly','patchwork')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
library(ellipsis)
packages = c('igraph','tidygraph','ggraph','hms','textplot','tidyverse','lubridate','ggwordcloud','DT','wordcloud',
'widyr','tidytext','dplyr','clock','visNetwork','hms','qdapDictionaries',
'corpus','syuzhet','greekLetters','textdata','plotly','patchwork')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
remotes::update_packages("ellipsis")
