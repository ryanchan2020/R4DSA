remove(email_records_cleaned3_rename_aggregated)
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
View(email_records_cleaned2_rename)
View(email_records_cleaned2_rename_aggregated)
View(email_records_cleaned2)
View(email_records_cleaned2_rename)
View(email_records_cleaned)
View(email_records_cleaned2_rename)
View(email_records_cleaned2_rename_aggregated)
email_records_cleaned2_rename <- email_records_cleaned2 %>%
rename (from = From) %>%
rename (to = To) %>%
mutate(Subject = str_remove_all(Subject,"RE")) %>%
mutate(Subject = trimws(Subject, which = c("both")))
email_records_cleaned2_rename_aggregated <- email_records_cleaned2_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
View(email_records_cleaned)
View(email_records_cleaned2)
View(email_records_cleaned2_rename)
View(email_records_cleaned2_rename_aggregated)
View(email_records_cleaned2)
View(email_records_cleaned2)
View(email_records_cleaned)
View(email_records_cleaned)
View(email_records_cleaned)
email_records_cleaned <- email_records_cleaned %>%
mutate(recipient_no = str_count(To,",")+1)
email_records_cleaned <- email_records_cleaned %>%
mutate(recipient_no = str_count(To,",")+1) %>%
mutate(Subject = gsub("[[:punct:]]", "",Subject)) %>%
mutate(Subject = trimws(Subject, which = c("both")))
email_records_cleaned <- email_records_cleaned %>%
mutate(recipient_no = str_count(To,",")+1) %>%
mutate(Subject = gsub("[[:punct:]]", "",Subject)) %>%
mutate(Subject = str_remove_all(Subject,"RE")) %>%
mutate(Subject = trimws(Subject, which = c("both")))
email_records_cleaned_relevant <- email_records_cleaned %>%
filter(recipient_no < 10)
View(email_records_cleaned_relevant)
View(email_records_cleaned_relevant)
employees_records <- readxl::read_xlsx("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/EmployeeRecords.xlsx")
employees_records_cleaned <- employees_records %>%
unite(fullname, FirstName, LastName, sep = " ", remove=FALSE) %>%
mutate_if(is.character, utf8_encode) %>%
mutate(fullname = gsub("\\.","",fullname))
employees_records_cleaned$fullname <- trimws(employees_records_cleaned$fullname, which = c("both"))
email_records <- read_csv("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/email headers.csv")
email_records_cleaned <- email_records %>%
mutate(To = str_remove_all(To,"@gastech.com.kronos|@gastech.com.tethys")) %>%
mutate(To = str_replace_all(To, "[.]", " ")) %>%
mutate(From = str_remove_all(From,"@gastech.com.kronos|@gastech.com.tethys")) %>%
mutate(From = str_replace_all(From, "[.]", " ")) %>%
mutate(Date = parse_date_time(x = Date, orders =c("%m%d%y %H%M","%m%d%y"))) %>%
mutate_if(is.character, utf8_encode)
email_records_cleaned <- email_records_cleaned %>%
mutate(recipient_no = str_count(To,",")+1) %>%
mutate(Subject = gsub("[[:punct:]]", "",Subject)) %>%
mutate(Subject = str_remove_all(Subject,"RE")) %>%
mutate(Subject = trimws(Subject, which = c("both")))
email_records_cleaned_relevant <- email_records_cleaned %>%
filter(recipient_no < 10)
email_records_cleaned_relevant_agg <- email_records_cleaned_relevant %>%
group_by()
email_records_cleaned2 <- strsplit(email_records_cleaned$To, split=",")
email_records_cleaned2 <- data.frame(From = rep(email_records_cleaned$From, sapply(email_records_cleaned2, length)),
To = unlist(email_records_cleaned2), Date = rep(email_records_cleaned$Date,
sapply(email_records_cleaned2, length)),
Subject =  rep(email_records_cleaned$Subject, sapply(email_records_cleaned2, length)))
email_records_cleaned2$To <- trimws(email_records_cleaned2$To, which = c("both"))
email_records_cleaned2$From <- trimws(email_records_cleaned2$From, which = c("both"))
#Tidying node list
employees_records_cleaned_rename <- employees_records_cleaned %>%
rename(id = fullname) %>%
rename (group = CurrentEmploymentType) %>%
arrange(id)
#Tidying edge list
email_records_cleaned2_rename <- email_records_cleaned2 %>%
rename (from = From) %>%
rename (to = To)
email_records_cleaned2_rename_aggregated <- email_records_cleaned2_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
# unique(email_records_cleaned2_rename_aggregated$to)
# unique(email_records_cleaned2_rename_aggregated$from)
# unique(employees_records_cleaned_rename$id)
View(email_records_cleaned2_rename_aggregated)
View(email_records_cleaned)
visNetwork(employees_records_cleaned_rename,
email_records_cleaned2_rename_aggregated) %>%
visEdges(arrows="to") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = TRUE,selectedBy = "group", collapse=TRUE) %>%
visLayout(randomSeed = 123) %>%
visLegend()
View(email_records_cleaned2_rename_aggregated)
View(email_records_cleaned_relevant_agg)
View(email_records_cleaned_relevant)
email_records_cleaned_relevant_agg <- email_records_cleaned_relevant %>%
group_by(From, To, Subject) %>%
summarise(Weight=n(), recipient_no=max(recipient_no))
View(email_records_cleaned_relevant_agg)
email_records_cleaned_relevant_net <- strsplit(email_records_cleaned_relevant$To, split=",")
email_records_cleaned_relevant_net <- data.frame(From = rep(email_records_cleaned_relevant$From, sapply(email_records_cleaned_relevant_net, length)),
To = unlist(email_records_cleaned_relevant_net), Date = rep(email_records_cleaned_relevant$Date, sapply(email_records_cleaned_relevant_net, length)),
Subject =  rep(email_records_cleaned$Subject, sapply(email_records_cleaned_relevant_net, length)))
email_records_cleaned_relevant_net <- data.frame(From = rep(email_records_cleaned_relevant$From, sapply(email_records_cleaned_relevant_net, length)),
To = unlist(email_records_cleaned_relevant_net), Date = rep(email_records_cleaned_relevant$Date, sapply(email_records_cleaned_relevant_net,length)),
Subject =  rep(email_records_cleaned$Subject, sapply(email_records_cleaned_relevant_net, length)))
email_records_cleaned_relevant_net <- strsplit(email_records_cleaned_relevant$To, split=",")
email_records_cleaned_relevant_net <- data.frame(From = rep(email_records_cleaned_relevant$From, sapply(email_records_cleaned_relevant_net, length)),
To = unlist(email_records_cleaned_relevant_net), Date = rep(email_records_cleaned_relevant$Date,
sapply(email_records_cleaned_relevant_net, length)),
Subject =  rep(email_records_cleaned_relevant$Subject, sapply(email_records_cleaned_relevant_net, length)))
email_records_cleaned_relevant_net$To <- trimws(email_records_cleaned_relevant_net$To, which = c("both"))
email_records_cleaned_relevant_net$From <- trimws(email_records_cleaned_relevant_net$From, which = c("both"))
View(email_records_cleaned_relevant_net)
email_records_cleaned_relevant_net_rename <- email_records_cleaned_relevant_net %>%
rename (from = From) %>%
rename (to = To)
email_records_cleaned_relevant_net_rename_agg <- email_records_cleaned_relevant_net_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
View(email_records_cleaned_relevant_net_rename_agg)
View(email_records_cleaned2_rename_aggregated)
View(email_records_analysis)
View(email_records_cleaned_relevant_agg)
View(email_records_cleaned_relevant_agg)
email_records_analysis2 <- email_records_cleaned_relevant_agg %>%
rename(c("Sender" = "From","Recipient" = "To","Count"="Weight","No. of Recipients"="recipient_no"))
View(email_records_analysis)
View(email_records_cleaned_relevant_agg)
email_records_analysis2 <- email_records_cleaned_relevant_agg %>%
rename(c("Sender" = "From","Recipient" = "To","Count"="Weight"))
View(email_records_analysis2)
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
View(employees_records_cleaned_rename)
View(employees_records_cleaned_rename)
employees_records_cleaned_rename_impt <- employees_records_cleaned_rename %>%
mutate(id=id, BirthCountry=BirthCountry, group=group,
CurrentEmploymentTitle=CurrentEmploymentTitle,
MilitaryServiceBranch=MilitaryServiceBranch)
View(employees_records_cleaned_rename_impt)
employees_records_cleaned_rename_impt <- employees_records_cleaned_rename %>%
transmute(id=id, BirthCountry=BirthCountry, group=group,
CurrentEmploymentTitle=CurrentEmploymentTitle,
MilitaryServiceBranch=MilitaryServiceBranch)
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
install.packages("rticles")
install.packages("rticles")
install.packages("rticles")
install.packages("rticles")
install.packages("rticles")
install.packages("tinytex")
install.packages("tinytex")
install.packages(c("blob", "broom", "bslib", "cachem", "car", "clipr", "clock", "colorspace", "corrplot", "cowplot", "credentials", "crosstalk", "curl", "data.table", "DBI", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "farver", "fastmap", "fitdistrplus", "gargle", "generics", "geojsonR", "gert", "ggrepel", "ggsignif", "googledrive", "googlesheets4", "gtools", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "installr", "leafem", "leaflet", "lme4", "lwgeom", "maptools", "MatrixModels", "matrixStats", "mime", "openssl", "openxlsx", "pbkrtest", "pillar", "plotly", "plotrix", "promises", "proxy", "ps", "quantreg", "raster", "rater", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "remotes", "reprex", "rgdal", "rio", "rmarkdown", "rprojroot", "rstatix", "Rttf2pt1", "rversions", "rvest", "sass", "sf", "shiny", "sp", "SparseM", "stars", "statmod", "stringi", "testthat", "tibble", "tidyselect", "tinytex", "tmap", "tmaptools", "tzdb", "units", "utf8", "vcd", "vcdExtra", "viridis", "xfun", "XML", "zip", "zoo"))
install.packages(c("blob", "broom", "bslib", "cachem", "car", "clipr", "clock", "colorspace", "corrplot", "cowplot", "credentials", "crosstalk", "curl", "data.table", "DBI", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "farver", "fastmap", "fitdistrplus", "gargle", "generics", "geojsonR", "gert", "ggrepel", "ggsignif", "googledrive", "googlesheets4", "gtools", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "installr", "leafem", "leaflet", "lme4", "lwgeom", "maptools", "MatrixModels", "matrixStats", "mime", "openssl", "openxlsx", "pbkrtest", "pillar", "plotly", "plotrix", "promises", "proxy", "ps", "quantreg", "raster", "rater", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "remotes", "reprex", "rgdal", "rio", "rmarkdown", "rprojroot", "rstatix", "Rttf2pt1", "rversions", "rvest", "sass", "sf", "shiny", "sp", "SparseM", "stars", "statmod", "stringi", "testthat", "tibble", "tidyselect", "tinytex", "tmap", "tmaptools", "tzdb", "units", "utf8", "vcd", "vcdExtra", "viridis", "xfun", "XML", "zip", "zoo"))
install.packages(c("blob", "broom", "bslib", "cachem", "car", "clipr", "clock", "colorspace", "corrplot", "cowplot", "credentials", "crosstalk", "curl", "data.table", "DBI", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "farver", "fastmap", "fitdistrplus", "gargle", "generics", "geojsonR", "gert", "ggrepel", "ggsignif", "googledrive", "googlesheets4", "gtools", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "installr", "leafem", "leaflet", "lme4", "lwgeom", "maptools", "MatrixModels", "matrixStats", "mime", "openssl", "openxlsx", "pbkrtest", "pillar", "plotly", "plotrix", "promises", "proxy", "ps", "quantreg", "raster", "rater", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "remotes", "reprex", "rgdal", "rio", "rmarkdown", "rprojroot", "rstatix", "Rttf2pt1", "rversions", "rvest", "sass", "sf", "shiny", "sp", "SparseM", "stars", "statmod", "stringi", "testthat", "tibble", "tidyselect", "tinytex", "tmap", "tmaptools", "tzdb", "units", "utf8", "vcd", "vcdExtra", "viridis", "xfun", "XML", "zip", "zoo"))
tinytex::install_tinytex()
tinytex:::is_tinytex()
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
knitr::opts_chunk$set(echo = FALSE)
packages = c('tidytext','widyr','wordcloud',
'DT','ggwordcloud','textplot',
'lubridate', 'hms', 'tidyverse',
'tidygraph', 'ggraph', 'igraph','stringr','tidyr', 'ggplot2',
'visNetwork', 'topicmodels', 'crosstalk', 'utf8', 'knitr','ldatuning', 'topicmodels','textmineR', "tm", "wordcloud")
for (p in packages) {
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
employees_records <- readxl::read_xlsx("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/EmployeeRecords.xlsx")
employees_records_cleaned <- employees_records %>%
unite(fullname, FirstName, LastName, sep = " ", remove=FALSE) %>%
mutate_if(is.character, utf8_encode) %>%
mutate(fullname = gsub("\\.","",fullname))
employees_records_cleaned$fullname <- trimws(employees_records_cleaned$fullname, which = c("both"))
email_records <- read_csv("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/email headers.csv")
email_records_cleaned <- email_records %>%
mutate(To = str_remove_all(To,"@gastech.com.kronos|@gastech.com.tethys")) %>%
mutate(To = str_replace_all(To, "[.]", " ")) %>%
mutate(From = str_remove_all(From,"@gastech.com.kronos|@gastech.com.tethys")) %>%
mutate(From = str_replace_all(From, "[.]", " ")) %>%
mutate(Date = parse_date_time(x = Date, orders =c("%m%d%y %H%M","%m%d%y"))) %>%
mutate_if(is.character, utf8_encode)
email_records_cleaned <- email_records_cleaned %>%
mutate(recipient_no = str_count(To,",")+1) %>%
mutate(Subject = gsub("[[:punct:]]", "",Subject)) %>%
mutate(Subject = str_remove_all(Subject,"RE")) %>%
mutate(Subject = trimws(Subject, which = c("both")))
email_records_cleaned2 <- strsplit(email_records_cleaned$To, split=",")
email_records_cleaned2 <- data.frame(From = rep(email_records_cleaned$From, sapply(email_records_cleaned2, length)),
To = unlist(email_records_cleaned2), Date = rep(email_records_cleaned$Date,
sapply(email_records_cleaned2, length)),
Subject =  rep(email_records_cleaned$Subject, sapply(email_records_cleaned2, length)))
email_records_cleaned2$To <- trimws(email_records_cleaned2$To, which = c("both"))
email_records_cleaned2$From <- trimws(email_records_cleaned2$From, which = c("both"))
# Relevant emails only
email_records_cleaned_relevant <- email_records_cleaned %>%
filter(recipient_no < 10)
email_records_cleaned_relevant_agg <- email_records_cleaned_relevant %>%
group_by(From, To, Subject) %>%
summarise(Weight=n(), recipient_no=max(recipient_no))
email_records_analysis2 <- email_records_cleaned_relevant_agg %>%
rename(c("Sender" = "From","Recipient" = "To","Count"="Weight"))
email_records_cleaned_relevant_net <- strsplit(email_records_cleaned_relevant$To, split=",")
email_records_cleaned_relevant_net <- data.frame(From = rep(email_records_cleaned_relevant$From, sapply(email_records_cleaned_relevant_net, length)),
To = unlist(email_records_cleaned_relevant_net), Date = rep(email_records_cleaned_relevant$Date,
sapply(email_records_cleaned_relevant_net, length)),
Subject =  rep(email_records_cleaned_relevant$Subject, sapply(email_records_cleaned_relevant_net, length)))
email_records_cleaned_relevant_net$To <- trimws(email_records_cleaned_relevant_net$To, which = c("both"))
email_records_cleaned_relevant_net$From <- trimws(email_records_cleaned_relevant_net$From, which = c("both"))
#Tidying edge list
email_records_cleaned_relevant_net_rename <- email_records_cleaned_relevant_net %>%
rename (from = From) %>%
rename (to = To)
email_records_cleaned_relevant_net_rename_agg <- email_records_cleaned_relevant_net_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
#Tidying node list
employees_records_cleaned_rename <- employees_records_cleaned %>%
rename(id = fullname) %>%
rename (group = CurrentEmploymentType) %>%
arrange(id)
employees_records_cleaned_rename_impt <- employees_records_cleaned_rename %>%
transmute(id=id, BirthCountry=BirthCountry, group=group,
CurrentEmploymentTitle=CurrentEmploymentTitle,
MilitaryServiceBranch=MilitaryServiceBranch)
#Tidying edge list
email_records_cleaned2_rename <- email_records_cleaned2 %>%
rename (from = From) %>%
rename (to = To)
email_records_cleaned2_rename_aggregated <- email_records_cleaned2_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
# unique(email_records_cleaned2_rename_aggregated$to)
# unique(email_records_cleaned2_rename_aggregated$from)
# unique(employees_records_cleaned_rename$id)
visNetwork(employees_records_cleaned_rename,
email_records_cleaned2_rename_aggregated) %>%
visEdges(arrows="to") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = TRUE,selectedBy = "group", collapse=TRUE) %>%
visLayout(randomSeed = 123) %>%
visLegend()
email_records_analysis <- email_records_cleaned2_rename %>%
group_by(from,to,Subject) %>%
summarise(count=n()) %>%
filter(from!=to) %>%
arrange(desc(count)) %>%
filter(count>0) %>%
rename(c("Sender" = "from","Recipient" = "to"))
datatable(email_records_analysis, filter='top', options = list(
autoWidth = TRUE, scrollX = TRUE, scrollCollapse = TRUE), extensions = "FixedColumns")
emails_records_summary <- email_records_cleaned2_rename %>%
filter(from!=to) %>%
group_by(Subject) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
filter(count>0)
datatable(emails_records_summary, filter='top', options = list(autoWidth = TRUE, scrollX = TRUE, scrollCollapse = TRUE), extensions = "FixedColumns")
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
knitr::opts_chunk$set(echo = FALSE)
employees_records <- readxl::read_xlsx("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/EmployeeRecords.xlsx")
employees_records_cleaned <- employees_records %>%
unite(fullname, FirstName, LastName, sep = " ", remove=FALSE) %>%
mutate_if(is.character, utf8_encode) %>%
mutate(fullname = gsub("\\.","",fullname))
packages = c('tidytext','widyr','wordcloud',
'DT','ggwordcloud','textplot',
'lubridate', 'hms', 'tidyverse',
'tidygraph', 'ggraph', 'igraph','stringr','tidyr', 'ggplot2',
'visNetwork', 'topicmodels', 'crosstalk', 'utf8', 'knitr','ldatuning', 'topicmodels','textmineR', "tm", "wordcloud")
for (p in packages) {
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
employees_records <- readxl::read_xlsx("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/EmployeeRecords.xlsx")
employees_records_cleaned <- employees_records %>%
unite(fullname, FirstName, LastName, sep = " ", remove=FALSE) %>%
mutate_if(is.character, utf8_encode) %>%
mutate(fullname = gsub("\\.","",fullname))
employees_records_cleaned$fullname <- trimws(employees_records_cleaned$fullname, which = c("both"))
email_records <- read_csv("C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Assignment 1/MC1/email headers.csv")
email_records_cleaned <- email_records %>%
mutate(To = str_remove_all(To,"@gastech.com.kronos|@gastech.com.tethys")) %>%
mutate(To = str_replace_all(To, "[.]", " ")) %>%
mutate(From = str_remove_all(From,"@gastech.com.kronos|@gastech.com.tethys")) %>%
mutate(From = str_replace_all(From, "[.]", " ")) %>%
mutate(Date = parse_date_time(x = Date, orders =c("%m%d%y %H%M","%m%d%y"))) %>%
mutate_if(is.character, utf8_encode)
email_records_cleaned <- email_records_cleaned %>%
mutate(recipient_no = str_count(To,",")+1) %>%
mutate(Subject = gsub("[[:punct:]]", "",Subject)) %>%
mutate(Subject = str_remove_all(Subject,"RE")) %>%
mutate(Subject = trimws(Subject, which = c("both")))
email_records_cleaned2 <- strsplit(email_records_cleaned$To, split=",")
email_records_cleaned2 <- data.frame(From = rep(email_records_cleaned$From, sapply(email_records_cleaned2, length)),
To = unlist(email_records_cleaned2), Date = rep(email_records_cleaned$Date,
sapply(email_records_cleaned2, length)),
Subject =  rep(email_records_cleaned$Subject, sapply(email_records_cleaned2, length)))
email_records_cleaned2$To <- trimws(email_records_cleaned2$To, which = c("both"))
email_records_cleaned2$From <- trimws(email_records_cleaned2$From, which = c("both"))
# Relevant emails only
email_records_cleaned_relevant <- email_records_cleaned %>%
filter(recipient_no < 10)
email_records_cleaned_relevant_agg <- email_records_cleaned_relevant %>%
group_by(From, To, Subject) %>%
summarise(Weight=n(), recipient_no=max(recipient_no))
email_records_analysis2 <- email_records_cleaned_relevant_agg %>%
rename(c("Sender" = "From","Recipient" = "To","Count"="Weight"))
email_records_cleaned_relevant_net <- strsplit(email_records_cleaned_relevant$To, split=",")
email_records_cleaned_relevant_net <- data.frame(From = rep(email_records_cleaned_relevant$From, sapply(email_records_cleaned_relevant_net, length)),
To = unlist(email_records_cleaned_relevant_net), Date = rep(email_records_cleaned_relevant$Date,
sapply(email_records_cleaned_relevant_net, length)),
Subject =  rep(email_records_cleaned_relevant$Subject, sapply(email_records_cleaned_relevant_net, length)))
email_records_cleaned_relevant_net$To <- trimws(email_records_cleaned_relevant_net$To, which = c("both"))
email_records_cleaned_relevant_net$From <- trimws(email_records_cleaned_relevant_net$From, which = c("both"))
#Tidying edge list
email_records_cleaned_relevant_net_rename <- email_records_cleaned_relevant_net %>%
rename (from = From) %>%
rename (to = To)
email_records_cleaned_relevant_net_rename_agg <- email_records_cleaned_relevant_net_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
#Tidying node list
employees_records_cleaned_rename <- employees_records_cleaned %>%
rename(id = fullname) %>%
rename (group = CurrentEmploymentType) %>%
arrange(id)
employees_records_cleaned_rename_impt <- employees_records_cleaned_rename %>%
transmute(id=id, BirthCountry=BirthCountry, group=group,
CurrentEmploymentTitle=CurrentEmploymentTitle,
MilitaryServiceBranch=MilitaryServiceBranch)
#Tidying edge list
email_records_cleaned2_rename <- email_records_cleaned2 %>%
rename (from = From) %>%
rename (to = To)
email_records_cleaned2_rename_aggregated <- email_records_cleaned2_rename %>%
group_by (from, to, Subject) %>%
summarise(Weight = n()) %>%
filter(from!=to) %>%
filter(to!=from) %>%
filter(Weight > 1) %>%
ungroup()
# unique(email_records_cleaned2_rename_aggregated$to)
# unique(email_records_cleaned2_rename_aggregated$from)
# unique(employees_records_cleaned_rename$id)
visNetwork(employees_records_cleaned_rename,
email_records_cleaned2_rename_aggregated) %>%
visEdges(arrows="to") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = TRUE,selectedBy = "group", collapse=TRUE) %>%
visLayout(randomSeed = 123) %>%
visLegend()
email_records_analysis <- email_records_cleaned2_rename %>%
group_by(from,to,Subject) %>%
summarise(count=n()) %>%
filter(from!=to) %>%
arrange(desc(count)) %>%
filter(count>0) %>%
rename(c("Sender" = "from","Recipient" = "to"))
datatable(email_records_analysis, filter='top', options = list(
autoWidth = TRUE, scrollX = TRUE, scrollCollapse = TRUE), extensions = "FixedColumns")
emails_records_summary <- email_records_cleaned2_rename %>%
filter(from!=to) %>%
group_by(Subject) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
filter(count>0)
datatable(emails_records_summary, filter='top', options = list(autoWidth = TRUE, scrollX = TRUE, scrollCollapse = TRUE), extensions = "FixedColumns")
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
detach("package:lubridate", unload = TRUE)
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
detach("package:lubridate", unload = TRUE)
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
for (p in packages) {library(p, character.only = T)}
packages = c('DT','shiny','lubridate','hms','tidytext','widyr','tidyverse','tidygraph','stringr','tidyr','visNetwork', 'utf8', 'knitr','textmineR')
source('~/.active-rstudio-document', echo=TRUE)
for (p in packages) {library(p, character.only = T)}
ackages = c('DT','shiny','lubridate','hms','tidytext','widyr','tidyverse','tidygraph','stringr','tidyr','visNetwork', 'utf8', 'knitr','textmineR')
for (p in packages
packages = c('DT','shiny','lubridate','hms','tidytext','widyr','tidyverse','tidygraph','stringr','tidyr','visNetwork', 'utf8', 'knitr','textmineR')
for (p in packages) {library(p, character.only = T)}
packages = c('DT','shiny','lubridate','hms','tidytext','widyr','tidyverse','tidygraph','stringr','tidyr','visNetwork', 'utf8', 'knitr','textmineR')
for (p in packages) {library(p, character.only = T)}
detach("package:lubridate", unload = TRUE)
packages = c('DT','shiny','lubridate','hms','tidytext','widyr','tidyverse','tidygraph','stringr','tidyr','visNetwork', 'utf8', 'knitr','textmineR')
for (p in packages) {library(p, character.only = T)}
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('emp_visnet_uiserver')
runApp('emp_visnet_uiserver')
runApp('emp_visnet_uiserver')
runApp('emp_visnet_uiserver')
runApp('emp_visnet_uiserver')
runApp('emp_visnet_uiserver')
detach("package:tidygraph", unload = TRUE)
detach("package:textmineR", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
runApp('emp_visnet_uiserver')
detach("package:dplyr", unload = TRUE)
detach("package:DT", unload = TRUE)
detach("package:forcats", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:ggraph", unload = TRUE)
detach("package:hms", unload = TRUE)
detach("package:igraph", unload = TRUE)
detach("package:knitr", unload = TRUE)
detach("package:lubridate", unload = TRUE)
detach("package:NLP", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:rsconnect", unload = TRUE)
detach("package:shiny", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tidytext", unload = TRUE)
detach("package:tm", unload = TRUE)
detach("package:utf8", unload = TRUE)
detach("package:visNetwork", unload = TRUE)
detach("package:widyr", unload = TRUE)
shiny::runApp('emp_visnet_uiserver')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('~/ISSS608 Visual Analytics/ryanchan2020/R4DSA/emp_visnet_uiserver')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
detach("package:visNetwork", unload = TRUE)
library(visNetwork)
install.packages("visNetwork")
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
install.packages("readr")
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
View(employees_records_cleaned_rename)
library(readr)
edges <- data.frame(from=email_records_cleaned_relevant_net_rename_agg$from,
to=email_records_cleaned_relevant_net_rename_agg$to,
value=email_records_cleaned_relevant_net_rename_agg$Weight)
write.csv(edges,"C:\\Users\\black\\Desktop\\Test\\edges.csv", row.names = FALSE)
write.csv(edges,"C:\\Users\\black\\Desktop\\edges.csv", row.names = FALSE)
write.csv(employees_records_cleaned_rename,"C:\\Users\\black\\Desktop\\nodes.csv", row.names = FALSE)
write.csv(employees_records_cleaned_rename_impt,"C:\\Users\\black\\Desktop\\relevant.csv", row.names = FALSE)
write.csv(email_records_analysis2,"C:\\Users\\black\\Desktop\\analysis.csv", row.names = FALSE)
edges <- read_csv("edges.csv")
edges <- read_csv("edges.csv")
employees_records_cleaned_rename <- read_csv("nodes.csv")
employees_records_cleaned_rename_impt <- read_csv("relevant.csv")
email_records_analysis2 <- read_csv("analysis.csv")
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
shiny::runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
runApp('C:/Users/black/Google Drive/SMU/MITB/Semester 3/Visual Analytics/Project/Employee_Network')
